sub merge_columns {

   my $dataref = shift;
 
   ### Merge adjacent columns with the same timepoint (i.e., 
   ### where a point says "arrives 10:30, leaves 10:35" just use the latter)

   my $prevtp = "";
   my $tp = 0;
   
   TIMEPOINT: while ( $tp < ( scalar @{$dataref->{"TP"}}) ) {
   

      my $thistp = $dataref->{TP}[$tp];
      $thistp =~ s/=[0-9]+$//;
      # eliminate =x from timepoint, for comparison

      unless ($thistp eq $prevtp) {
          $prevtp = $dataref->{TP}[$tp];
          $tp++;
          next TIMEPOINT;
      }

      # unless they're the same timepoint, increment the counter
      # and go to the next one

      # so if it gets past that, we have duplicate columns

      splice (@{$dataref->{"TP"}}, $tp, 1);
      # that gets rid of the second TP
      
      for (my $row =0; $row < scalar @{$dataref->{"TIMES"}[$tp]}  ;  $row++) {
      
         $dataref->{TIMES}[$tp - 1][$row]  
            = $dataref->{TIMES}[$tp][$row] 
                if $dataref->{TIMES}[$tp][$row];
             
      }
      # that takes all the values in the second column and 
      # puts them in the first column

      splice (@{$dataref->{TIMES}}, $tp, 1);
      # gets rid of extra TIMES array, now duplicated in the previous one

   }

}
