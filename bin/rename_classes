#!/usr/bin/env perl
#
# This is used for modifying the class names in Storable files. If we
# store a blessed object and then retrieve it, it will keep the old
# name. If we've renamed the class in the meantime, it will give errors.
#
# To fix it, make sure all the new classes are loaded, use typeglob
# aliasing to set the old name of the class to be an alias to the new
# name of the class, and then load the file. Except for the very outer
# object, all the classes will magically become associated with the new
# name and they can be saved out. The very outer object has to be
# reblessed manually with the new name.
#
# I don't really understand why the aliasing works the way it does. But
# I'm not complaining.
#
# HOWEVER well it works on classes, though, it doesn't work on attributes.
# This could well conflict with data, but in this case it didn't.

use Storable;
use Data::Dumper;

use Octium::SkedCollection;
use Octium::Sked;
use Octium::Days;
use Octium::Dir;
use Octium::Sked::Trip;
use Octium::Folders::Signup;

*Octium::O::Sked::Collection:: = *Octium::SkedCollection::;
*Octium::O::Sked::             = *Octium::Sked::;
*Octium::O::Days::             = *Octium::Days::;
*Octium::O::Dir::              = *Octium::Dir::;
*Octium::O::Sked::Trip::       = *Octium::Sked::Trip::;
*Octium::O::Folders::Signup::  = *Octium::Folders::Signup::;

my $storefile = $ARGV[0];

my $new = "new_$storefile";

my $dump;
{
    my $data = Storable::retrieve($storefile);
    $dump = Dumper($data);
}

$dump =~ s/days_obj/days/g;

our $VAR1;
eval $dump;

bless $VAR1, 'Octium::SkedCollection';

Storable::nstore( $VAR1, $new );
