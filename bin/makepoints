#!/usr/bin/perl

# makepoints
#
# This program generates the point schedules associated with 
# particular signs.

use strict;
use warnings;

# initialization

use FindBin('$Bin'); 
   # so $Bin is the location of the very file we're in now

use lib $Bin; 
   # there are few enough files that it makes sense to keep
   # main program and library in the same directory

# libraries dependent on $Bin

use FPMerge qw(FPread FPread_simple);
use Skedfile qw(Skedread);

# open and load files

our $skedsdir = "$Bin/..";

chdir $skedsdir or die "Can't change directory to $skedsdir .";

print STDERR<<"EOF";
makepoints - This is the makepoints program. It creates point schedules
from the data exported from the FileMaker databases.

Now loading data ...
EOF

# read in FileMaker Pro data into variables in package main

our (@signs, @stops, @lines, @skedspec);
our (%signs, %stops, %lines, %skedspec);

print STDERR "Signs... ";
FPread_simple ("fm/Signs.csv" , \@signs, \%signs, 'SignID');
print STDERR scalar(keys %signs) , " records.\nSkedspec... ";
FPread ("fm/SkedSpec.csv" , \@skedspec, \%skedspec, 'SignID' , 1, 0);
# ignores repeating fields, but works with non-unique SignIDs
print STDERR scalar(keys %skedspec) , " records.\nLines... ";
FPread_simple ("fm/Lines.csv" , \@lines, \%lines, 'Line');
print STDERR scalar(keys %lines) , " records.\nStops (be patient, please) ... ";
FPread_simple ("fm/Stops.csv" , \@stops , \%stops , 'UNIQUEID');

print STDERR scalar(keys %stops) , " records.\nLoaded.\n\n";

# main loop

print STDERR "Now processing point schedules.\n";

foreach my $signid (sort {$a <=> $b} keys %signs) {

   next unless $signs{$signid}{Active} and exists $skedspec{$signid};
   # skip inactive signs and those without skedspecs
   
   print STDERR "$signid\t";

   my $point = build_point($signid); # point is a hashref

   output_point ($point);

}

sub build_point {

   my $signid = shift;
   our (%signs, %skedspec);
   my $schooldayflag = "";

   my $point = {}; # anonymous hash

   foreach my $skedspec ( @{$skedspec{$signid}} ) {
      # each schedule spec that matches this sign ID
       $sked = Skedread($schedspec->'Timetable');

      

   }

}
